import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState, AppThunk } from '../index'
import { fetchCount } from '../../api/counterAPI'

// interface state
export interface CounterState {
  value: number
  status: 'idle' | 'loading' | 'failed'
}

const initialState: CounterState = {
  value: 0,
  status: 'idle'
}

export const selectCount = (state: RootState) => state.counter.value

export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {
  const response = await fetchCount(amount)
  // The value we return becomes the `fulfilled` action payload
  return response.data
})

export const multiplyAsync = createAsyncThunk('counter/multiplyCount', async (amount: number) => {
  const response = await fetchCount(amount)
  // The value we return becomes the `fulfilled` action payload
  return response.data
})

export const divideAsync = createAsyncThunk('counter/divideCount', async (amount: number) => {
  const response = await fetchCount(amount)
  // The value we return becomes the `fulfilled` action payload
  return response.data
})

// dispatch reducer
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount))
    }
  }

export const divideIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(divideByAmount(amount))
    }
  }

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: state => {
      console.log('ðŸš€TCL: >> state', state)
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: state => {
      console.log('ðŸš€TCL: >> state', state)
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      console.log('ðŸš€TCL: >> action', action)
      console.log('ðŸš€TCL: >> state', state)
      state.value += action.payload
    },

    // Use the PayloadAction type to declare the contents of `action.payload`
    divideByAmount: (state, action: PayloadAction<number>) => {
      console.log('ðŸš€TCL: >> action', action)
      console.log('ðŸš€TCL: >> state', state)
      state.value /= action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // For me, it is used to handle async result
  extraReducers: builder => {
    builder
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value += action.payload
      })

      .addCase(multiplyAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value *= action.payload
      })

      .addCase(divideAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value /= action.payload
      })
  }
})

export const { increment, decrement, incrementByAmount, divideByAmount } = counterSlice.actions

export default counterSlice.reducer
